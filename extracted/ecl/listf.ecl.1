
LISTFVERSION <- "7 (22-MAR-78)";

PREFIX("UNPEEPFILE");

PREFIX("READFILE");

PREFIX("FILEINDEX");

PREFIX("PEEPFILE");

SYNFIX("<+", "<-");

LISTFILES <-
 EXPR(OUTFILE:FORM UNEVAL, FILES:FORM LISTED)
  BEGIN
   OUTFILE <- GETVALIDFILENAME(OUTFILE, 'LST');
   FILES <- GETVALIDFILELIST(FILES);
   DECL FILEINDEXES:FORM BYVAL LISTAPPEND(FILES);
   DECL OUTPORT:PORT LIKE OPEN(OUTFILE, "OUT");
   DECL DIRECTORY:FORM LIKE SORTFILE(CATFILES(FILEINDEXES));
   DECL OLDWIDTH:ANY BYVAL PEEK\UP(WIDTH);
   DECL OLDLISTS:ANY BYVAL POKE\UP(LISTS, "FAT");
SET\UP(132);
   POKE\UP(LINE, 0);
   PRINT(OUTFILE, OUTPORT);
   PRINT("
", OUTPORT);
   UNPARSFM(CONS("<", FILES), OUTPORT, - 1);
   PRINT("
", OUTPORT);
   PEEK\UP(LINE) <+ 2;
   WRITEINDEX(DIRECTORY, OUTPORT);
  SET\UP(OLDWIDTH);
   WRITENUMBEREDFILES(FILEINDEXES, OUTPORT);
   POKE\UP(LISTS, OLDLISTS);
   CLOSE(OUTPORT);
  END;

SORTFILE <-
 EXPR(INDEX:FORM BYVAL; FORM)
  BEGIN
   DECL KEY:SYMBOL;
   DECL KEYEDCOUNT:INT;
   DECL THIS, KEYED:FORM;
   REPEAT
    INDEX = NIL => NOTHING;
    THIS <- CAR(INDEX);
    LISTP(THIS) AND INTP(CAR(THIS)) AND LISTP(CDR(THIS)) ->
     BEGIN
      KEY <- FIND\KEY(CAR(CDR(THIS)));
      KEY = NIL => NOTHING;
      KEYED <- CONS(CONS(RAISECASE(KEY), THIS), KEYED);
      KEYEDCOUNT <- KEYEDCOUNT + 1;
     END;
    INDEX <- CDR(INDEX);
   END;
   DECL TABLE:SEQ(STRUCT(K:SYMBOL, F:FORM)) SIZE KEYEDCOUNT;
   INDEX <- KEYED;
   FOR I TO KEYEDCOUNT
    REPEAT
     TABLE[I].K <- CAR(CAR(INDEX));
     TABLE[I].F <- CDR(CAR(INDEX));
     INDEX <- CDR(INDEX);
    END;
   QSORT(TABLE, "K");
   INDEX <- KEYED;
   FOR I TO KEYEDCOUNT
    REPEAT CAR(INDEX) <- TABLE[I].F; INDEX <- CDR(INDEX) END;
   CONS("BEGIN", KEYED);
  END;

WRITEINDEX <-
 EXPR(INDEX:FORM, OUTPORT:PORT; FORM)
  BEGIN
   INDEX = NIL => NIL;
   DECL SAVEPAGINATE:BOOL BYVAL POKE\UP(PAGINATE, TRUE);
   DECL UPLINE:INT SHARED PEEK\UP(LINE);
   DECL HEIGHT:INT SHARED PEEK\UP(HEIGHT);
   DECL TAIL:FORM BYVAL INDEX;
   DECL EJECT\UP:PROC(PORT) LIKE PEEK\UP(EJECT);
   DECL ORDER:INT;
   DECL FILE, LASTFILE:SYMBOL;
   DECL P:FORM;
   REPEAT
    (TAIL <- CDR(TAIL)) = NIL => NOTHING;
    UPLINE GE HEIGHT -> [) EJECT\UP(OUTPORT); LASTFILE <- NIL (];
    P _ CAR(TAIL);
    BEGIN
     LISTP(P) AND INTP(CAR(P)) #> PRINT('---		---	', OUTPORT);
     ORDER <- VAL(CAR(P));
     FILE <- EVAL(CAR(CDR(P <- CDR(P))));
     FILE = LASTFILE OR
      LENGTH(BASIC\STR(PRINT(FILE, OUTPORT))) LT 8 ->
      PRINT(%	, OUTPORT);
     PRINT(%	, OUTPORT);
     PRINT(ORDER, OUTPORT);
     PRINT(%	, OUTPORT);
     LASTFILE <- FILE;
     P <- CAR(P);
    END;
    UNPARSFM(P, OUTPORT, - 1, 24);
    PRINT("
", OUTPORT);
    UPLINE <- UPLINE + 1;
   END;
   UPLINE GT 0 -> EJECT\UP(OUTPORT);
   POKE\UP(PAGINATE, SAVEPAGINATE);
   INDEX;
  END;

FIND\KEY <-
 EXPR(SHORT:FORM BYVAL; SYMBOL)
  [) LISTP(SHORT) #> NIL; FIND\KEY2(SHORT) (];

FIND\KEY2 <-
 EXPR(SHORT:FORM; SYMBOL)
  CASE[MD(VAL(SHORT))]
   [ATOM] => SHORT;
   [REF] MD(VAL(VAL(SHORT))) = SYMBOL => EVAL(SHORT);
   [DTPR] =>
    BEGIN
     DECL KEY:SYMBOL;
     LISTP(CDR(SHORT)) -> KEY <- FIND\KEY2(CAR(CDR(SHORT)));
     KEY # NIL => KEY;
     FIND\KEY2(CAR(SHORT));
    END;
   TRUE => NIL;
  END;

WRITENUMBEREDFILES <-
 EXPR(INDEXLIST:FORM BYVAL, OUTPORT:PORT)
  BEGIN
   DECL OLDINDENT:INT BYVAL POKE\UP(INDENT, 2);
   DECL OLDHEIGHT:INT BYVAL POKE\UP(HEIGHT, 55);
   DECL OLDCOMMENT:INT BYVAL POKE\UP(COMMENT, 50);
   REPEAT
    INDEXLIST = NIL => NOTHING;
    PRINTFILE(CAR(INDEXLIST), OUTPORT);
    INDEXLIST <- CDR(INDEXLIST);
   END;
   POKE\UP(HEIGHT, OLDHEIGHT);
   POKE\UP(INDENT, OLDINDENT);
   POKE\UP(COMMENT, OLDCOMMENT);
  END;

PRINTFILE <-
 EXPR(INDEX:FORM BYVAL, OUTPORT:PORT)
  BEGIN
   DECL COUNT:INT BYVAL 1;
   DECL OLDWIDTH:INT BYVAL PEEK\UP(WIDTH);
   DECL LINE:INT SHARED PEEK\UP(LINE);
   DECL FILE:SYMBOL;
   CDR(INDEX) = NIL => NOTHING;
   FILE <- INDEXLINEFILENAME(CAR(CDR(INDEX)));
   READFILE INDEX;
SET\UP(OLDWIDTH + 10);
   POKE\UP(PAGINATE, TRUE);
   REPEAT
    (INDEX <- CDR(INDEX)) = NIL => NOTHING;
    CAR(INDEX) # "^" -> PEEK\UP(TRYEJECT)(OUTPORT);
    LINE = 0 ->
     BEGIN
      PRINT(%[, OUTPORT);
      PRINT(FILE, OUTPORT);
      PRINT(']
', OUTPORT);
      LINE <- LINE + 1;
     END;
    PRINT("
", OUTPORT);
    LINE <- LINE + 1;
    PRINT(COUNT, OUTPORT);
    COUNT <- COUNT + 1;
    PRINT(%	, OUTPORT);
    UNPARSFM(CAR(INDEX), OUTPORT, - 1, 8);
    PRINT(';
', OUTPORT);
    LINE <- LINE + 1;
    CAR(INDEX) = "^" -> PEEK\UP(EJECT)(OUTPORT);
   END;
SET\UP(OLDWIDTH);
   POKE\UP(PAGINATE, FALSE);
   LINE # 0 -> PEEK\UP(EJECT)(OUTPORT);
  END;

INDEXLINEFILENAME <-
 EXPR(LINE:FORM; SYMBOL) VAL(VAL(CAR(CDR(CDR(LINE)))));

NUMBERFILE <-
 EXPR(OLDFILE:SYMBOL, NEWFILE:SYMBOL; FORM)
  WRITENUMBEREDFILE(FILEINDEX OLDFILE, NEWFILE);

LISTP <- EXPR(A:ANY; BOOL) MD(VAL(A)) = DTPR;

INTP <- EXPR(A:ANY; BOOL) MD(VAL(A)) = INT;

RAISECASE <-
 EXPR(SYM:SYMBOL; SYMBOL)
  BEGIN
   DECL S:STRING BYVAL BASIC\STR(SYM);
   DECL SI:INT;
   FOR I TO LENGTH(S)
    REPEAT
     SI _ CHAR\INT(S[I]);
     SI GE LOWERA AND SI LE LOWERZ -> S[I] <- INT\CHAR(SI - 32);
    END;
   HASH(S);
  END;

DECLARE /* CONSTANT(LOWERA, LOWERZ);

LOWERA <- CHAR\INT(%A) + 32;

LOWERZ <- CHAR\INT(%Z) + 32;

PORT\STEM\EXT <-
 EXPR(PS:STRING, STEM:PTR(STRING), EXT:PTR(INT, STRING))
  BEGIN
   DECL COLON, PREDOT:INT;
   FOR I TO PREDOT <- LENGTH(PS)
    REPEAT
     CASE[PS[I]] [%:] => COLON <- I; [%.] => PREDOT <- I - 1 END;
    END;
   STEM <- ALLOC(STRING SIZE PREDOT - COLON);
   FOR I TO LENGTH(STEM) REPEAT STEM[I] <- PS[COLON + I] END;
   PREDOT = LENGTH(PS) => EXT <- NIL;
   PREDOT <+ 1;
   (COLON <- LENGTH(PS) - PREDOT) LE 0 => EXT <- ALLOC(STRING);
   DECL T:STRING SIZE COLON;
   FOR I TO COLON REPEAT T[I] <- PS[PREDOT + I] END;
   BASIC\STR(COLON <- STINT(T)) = T =>
    EXT <- ALLOC(INT LIKE COLON);
   EXT <- ALLOC(STRING LIKE T);
  END;

EXTEND\NAME <-
 EXPR(STEM:PTR(STRING), EXT:STRING; SYMBOL)
  BEGIN
   DECL S:STRING SIZE LENGTH(STEM) + LENGTH(EXT) + 1;
   DECL SI:INT;
   SHARED SI <- 1 TO LENGTH(STEM) REPEAT S[SI] <- STEM[SI] END;
   S[SI <+ 1] <- %.;
   FOR I TO LENGTH(EXT) REPEAT S[SI <+ 1] <- EXT[I] END;
   HASH(S);
  END;

FILEEXISTS <-
 EXPR(NAME:SYMBOL; BOOL)
  BOOL <<
   BEGIN
    DECL FNA\E:FORM LIKE RETURNFALSE;
    CLOSE(OPEN(NAME));
    TRUE;
   END;

RETURNFALSE <- QUOTE(RETURN(FALSE));

CATFILES <-
 EXPR(FILES:FORM BYVAL; FORM)
  BEGIN
   DECL NEWINDEX:FORM;
   DECL OLDABBREVDEPTH:INT BYVAL POKE\EF(ABBREVDEPTH, 3);
   REPEAT
    FILES = NIL => NOTHING;
    DECL PAR\E:FORM LIKE PARSEERRORFORM;
    DECL INDEX:FORM;
    REPEAT
     DECL PARSEERRORDETECTED:BOOL;
     INDEX <- FILEINDEX CAR(FILES);
     NOT PARSEERRORDETECTED =>
      BEGIN
       CAR(FILES) <- INDEX;
       INDEX <- UNPEEPFILE PEEPFILE COPYFILE(INDEX);
       NEWINDEX <- LISTAPPEND(CDR(INDEX), NEWINDEX);
      END;
     BREAK('
Change syntax in environment or file. Then type CONT();<NEWLINE>');
    END;
    FILES <- CDR(FILES);
   END;
   POKE\EF(ABBREVDEPTH, OLDABBREVDEPTH);
   CONS("BEGIN", NEWINDEX);
  END;

COPYFILE <-
 EXPR(INDEX:FORM BYVAL; FORM)
  BEGIN
   DECL NEWINDEX, TAIL:FORM BYVAL LISTAPPEND(INDEX);
   INDEX = NIL => NIL;
   REPEAT
    (TAIL <- CDR(TAIL)) = NIL => NOTHING;
    ISREAD(CAR(TAIL)) +> CAR(TAIL) <- LISTAPPEND(CAR(TAIL));
   END;
   NEWINDEX;
  END;

ISREAD <-
 EXPR(LINE:FORM; BOOL) LISTP(LINE) AND MD(VAL(CAR(LINE))) = INT;

GETVALIDFILELIST <-
 EXPR(FILES:FORM BYVAL; FORM)
  BEGIN
   DECL NAME:SYMBOL;
   DECL NEWFILES:FORM BYVAL FILES <- LISTAPPEND(FILES);
   REPEAT
    FILES = NIL => NEWFILES;
    DECL FILE:FORM SHARED CAR(FILES);
    REPEAT
     NAME <- GETVALIDFILENAME(FILE, 'ECL');
     FILEEXISTS(NAME) => FILE <- NAME;
     FILE <- GETNEWFILEFORM(FILE, ' does not exist');
    END;
    FILES <- FILES.CDR;
   END;
  END;

GETVALIDFILENAME <-
 EXPR(FILE:FORM BYVAL,
      DEFEXT:STRING,
      STEM:PTR(STRING) SHARED;
      SYMBOL)
  BEGIN
   DECL TRIAL:SYMBOL;
   DECL EXT:PTR(INT, STRING);
   REPEAT
    TRIAL <-
     CASE[MD(VAL(FILE))]
      [ATOM] => FILE;
      [REF] MD(VAL(VAL(FILE))) = SYMBOL => VAL(VAL(FILE));
      TRUE => NIL;
     END;
    TRIAL # NIL => NOTHING;
    FILE <- GETNEWFILEFORM(FILE, ' not a SYMBOL');
   END;
   PORT\STEM\EXT(BASIC\STR(TRIAL), STEM, EXT);
   EXT = NIL => EXTEND\NAME(STEM, DEFEXT);
   TRIAL;
  END;

GETNEWFILEFORM <-
 EXPR(FILE:FORM, MESSAGE:STRING; FORM)
  BEGIN
   PFORM(FILE, COPORT);
   PRINT(MESSAGE, COPORT);
   DECL PAIR:DTPR;
   REPEAT
    PRINT('
New Name: ', COPORT);
    PAIR <- PARSE(CIPORT, COPORT);
    PAIR.CAR = "SUCCESS" OR PAIR.CAR = "PSUCCESS" => PAIR.CDR;
    PRINT('Type  STEM;<NEWLINE>
or    "STEM.EXT";<NEWLINE>',
	  COPORT);
   END;
  END;

<+ <- EXPR(L:INT, R:INT; INT) L <- L + R;

PARSEERRORHANDLER <-
 EXPR(; BOOL)
  BEGIN
   DECL SUPPRESSMESSAGE:BOOL BYVAL PARSEERRORDETECTED;
   PARSEERRORDETECTED <- TRUE;
   SUPPRESSMESSAGE;
  END;

PARSEERRORFORM <- QUOTE() 					  /* 'FILLED BY INITFIXRNO';

LISTFHELP <-
 'To produce an indexed listing of files F1.ECL, ..., Fk.ECL,
calling the result L.LST:
-> LISTFILES(L,F1,...,FK);
You may override the default file extensions by quoting the file names:
-> LISTFILES("OUT.PUT","A.1","B.47");
';

INITLISTF <-
 EXPR()
  BEGIN
   INFIX("<->", 3);
   INFIX("<--->", 3);
   SYNFIX("&?", "=>");
   SYNFIX("&$", "=>");
   PREFIX("??");
   PREFIX("$$");
   INFIX("WHERE", 5);
   PREFIX(".*");
   PREFIX("*.");
   PREFIX("RAISE");
   NOFIX("RESTART");
   NOFIX("FLUSH\RW");
   INFIX("==", 40);
   INFIX("IS\CONSTANT", 55);
   INFIX("IS\MODE", 55);
   INFIX("INITIALLY", 55);
   INFIX("OF\", 130);
   INFIX("SIZE\", 140);
   INFIX("CROSS", 150, TRUE);
   INFIX("&", 170, TRUE);
   INFIX("LIKE\", 45);
   INFIX("SHARED\", 45);
   INFIX("BYVAL\", 45);
   QSORT = NOTHING -> LOADB "ECL:SORT";
   READFILE = NOTHING -> LOADB "ECL:EDITF";
   UNPARSE = NOTHING -> LOADB "ECL:UP";
   PARSEERRORFORM <- LIST(PARSEERRORHANDLER);
   PRINT('[LISTF.', COPORT);
   PRINT(LISTFVERSION, COPORT);
   PRINT(']  For help, type LISTFHELP<ESC>
', COPORT);
  END;

INITLISTF();
   